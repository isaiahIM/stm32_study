
// E    : PORTA.0
// RS   : PORTA.1
// RW   : PORTA.2
// DATA : PORTB.0 ~ PORTB.7


DEFINE char init;

DEFINE char display_on_off
DEFINE char cursor_on_off
DEFINE char cursor_blink_on_off

DEFINE char address_inc_dec;
DEFINE char shift_entire_display;

DEFINE char shift_cursor;
DEFINE char shift_display;
DEFINE char data_length
DEFINE char line_number
DEFINE char disp_2_line

DEFINE char font_type

DEFINE char addr_CGRAM
DEFINE char addr_DDRAM

DEFINE unsigned char display_value1[16];
DEFINE unsigned char display_value2[16];
DEFINE unsigned char display_empty_value[16];

DEFINE unsigned char cursor_pos1[16];
DEFINE unsigned char cursor_pos2[16];

DEFINE char char_pos;
DEFINE char cursor_position;

DEFINE char cursor_direction_left_right 
DEFINE unsigned char portB_value;
DEFINE char char_pos;
DEFINE char cursor_blink;



FUNC void lcd_display()
{
  int i;

  printf("\n");
  printf("\n");
  printf("\n");
  printf("|================================|\n");
  printf("|                                |\n");
  printf("|");

  for (i = 0 ; i < 16; i++)  {
    if(display_on_off == 1)
      printf(" %c",display_value1[i]);
    else
      printf(" %c",display_empty_value[i]);
  }

            printf("|\n");
  printf("|");



  for(i=0;i<16;i++){
    if( (i == cursor_position) && (line_number == 1) ){
      if(cursor_on_off == 1)  // Cursor turned On
        printf("£þ");
      else
        printf("  ");
    }
    else 
      printf("  ");
  }

  printf("|\n");
  printf("|");

  for (i = 0 ; i < 16; i++)  {
    if(display_on_off == 1)
      printf(" %c",display_value2[i]);
    else
      printf(" %c",display_empty_value[i]);
  }

  printf("|");  
  printf("\n");

  printf("|");

  for(i=0;i<16;i++){
    if((i == cursor_position) && (line_number == 2)){
      if(cursor_on_off == 1)  // Cursor turned On
        printf("£þ");
      else
        printf("  ");
    }
    else 
      printf("  ");
  }

  printf("|\n"); 
  printf("|================================|\n");

  //printf("\n");


}



FUNC void function_set(unsigned char portB_value) {

    if(portB_value & 0x10){ 
      data_length = 1;  // 1 : 8 bit data length
      printf("  [FUNCTION SET] 8 bit data length\n");
    }
    else{ 
      data_length = 0;  // 1 : 4 bit data length
      printf("  [FUNCTION SET] 4 bit data length\n");
    }

    if(portB_value & 0x08){ 
      disp_2_line = 1;  // 1 :  2-line display
      printf("  [FUNCTION SET] 2-line display\n");
    }
    else{ 
      disp_2_line = 0;  // 0 :  1-line display
      printf("  [FUNCTION SET] 1-line display\n");
    }

    if(portB_value & 0x04){ 
      font_type = 1;  // 1 : 5 x 11 font
      printf("  [FUNCTION SET] 5 x 11 font\n");
    }
    else{ 
      font_type = 0;  // 0 :5 x 8 font
      printf("  [FUNCTION SET] 5 x 8 font\n");
    }

    lcd_display();

}




FUNC void cursor_display_shift(unsigned char portB_value) {

    if(portB_value & 0x08){ 
      shift_display = 1;  // cursor/blink moves to right
      printf("  [CURSOR DISPLAY SHIFT] Display shift to the Right\n");
    }
    else{ 
      shift_display = 0;  // cursor/blink moves to left
      printf("  [CURSOR DISPLAY SHIFT] Display shift to the Left\n");
    }

    if(portB_value & 0x04){
      shift_cursor = 1;  // shift right
      printf("  [CURSOR DISPLAY SHIFT] Cursor shift to the Right\n");
    }
    else{ 
      shift_cursor = 0;  // shift left
      printf("  [CURSOR DISPLAY SHIFT] Cursor shift to the Left\n");
    }

    lcd_display();
}



FUNC void disp_on_off(unsigned char portB_value) {

    if(portB_value & 0x04){ 
      display_on_off = 1;  // 0 : Display Off
      printf("  [DISPLAY ON OFF] Display turned On\n");
    }
    else{ 
      display_on_off = 0;  // 1 : Display On
      printf("  [DISPLAY ON OFF] Display turned Off\n");
    }

    if(portB_value & 0x02){ 
      cursor_on_off = 1;  // 1 : Cursor On
      printf("  [DISPLAY ON OFF] Cursor turned On\n");
      
    }
    else{ 
      cursor_on_off = 0;  // 0 : Cursor Off
      printf("  [DISPLAY ON OFF] Cursor turned Off\n");

    }

    if(portB_value & 0x01){ 
      cursor_blink_on_off = 1;  // 1 : Cursor blink On
      printf("  [DISPLAY ON OFF] cursor Blink turned On\n");
    }
    else{ 
      cursor_blink_on_off = 0;  // 0 : Cursor Off
      cursor_blink = 1;
      printf("  [DISPLAY ON OFF] Cursor Blink turned Off\n");
    }

    lcd_display();

}




FUNC void addr_inc_dec(unsigned char portB_value) {

    if(portB_value & 0x02){ 
      address_inc_dec = 0;  // cursor/blink moves to right
      printf("  [ADDRESS INC DEC] Cursor moves to Right\n");
      cursor_direction_left_right = 1;  // 1 : direction RIGHT
      
      //cursor_position = 0;
      //char_pos = 0;
    }
    else{ 
      address_inc_dec = 1;  // cursor/blink moves to left
      printf("  [ADDRESS INC DEC] Cursor moves to Left\n");
      cursor_direction_left_right = 0;  // 0 : direction left
      
      //cursor_position = 15;
      //char_pos = 15;
    }

    if(portB_value & 0x01){
      shift_entire_display = 1;  // shift entire display On
      printf("  [ADDRESS INC DEC] Shift entire display On\n");
    }
    else{ 
      shift_entire_display = 0;  // shift entire display Off
      printf("  [ADDRESS INC DEC] Shift entire display Off\n");
    }

    lcd_display();
}



FUNC void data_func(unsigned char data_value)
{
    unsigned int i;
		unsigned int j;
    unsigned char tmp_data;

    if(shift_entire_display == 1)  // shift entire display On
    {
      if(address_inc_dec == 0){  // cursor/blink moves to right 
        if(line_number == 1){
          for(i=15;i>0;i--){
            j = i-1;
            display_value1[i] = display_value1[j];
          }
        }
        else if(line_number == 2){
          for(i=15;i>0;i--){
						j = i-1;
            display_value2[i] = display_value2[j];
          }
        }
      }
      else{  // cursor/blink moves to left
        if(line_number == 1){
          for(i=1;i<16;i++){
            display_value1[i-1] = display_value1[i];
          }
        }
        else if(line_number == 2){
          for(i=1;i<16;i++){
            display_value2[i-1] = display_value2[i];
          }
        }
      }

    }

    if(line_number == 1){
      if( !(char_pos < 0) )
        display_value1[char_pos] = data_value;
    }
    else if(line_number == 2){
      if( !(char_pos < 0) )
        display_value2[char_pos] = data_value;
    }


    if(shift_entire_display == 0){  // shift entire display Off
      if(cursor_direction_left_right == 1)  // 1 : direction right
        cursor_position = char_pos + 1;
      else
        cursor_position = char_pos - 1;
    }


    lcd_display();

    if(shift_entire_display == 0){  // shift entire display Off
      if(cursor_direction_left_right == 1){  // 1 : direction right
        if(init ==1)
          char_pos++;

        if(char_pos > 15){
          if(char_pos > 0x27)
            char_pos = 0x27;

          //if(line_number == 1) line_number = 2;
          //else  line_number = 1;
        }
      }
      else{
        if(init == 1)
          char_pos--;

        if(char_pos < 0){
          char_pos = -1;
          //if(line_number == 1) line_number = 2;
          //else  line_number = 1;
        } 
      }
    }          
}




SIGNAL void char_lcd(){
  int i;

  char falling_edge;
  char rising_edge_init;
  unsigned char portA_value;
  unsigned char portB_value;


  init=0;
  falling_edge = 0;
  rising_edge_init = 0;
  portA_value = 0;
  portB_value = 0;
  address_inc_dec = 0;
  shift_entire_display = 0;


  display_on_off = 0;
  cursor_on_off = 0;
  cursor_blink_on_off = 0;

  shift_cursor = 0;
  shift_display = 0;

  data_length = 0;
  line_number = 0;

  font_type = 0;

  addr_CGRAM = 0;
  addr_DDRAM = 0;


  line_number = 1;

  cursor_direction_left_right = 0;  // 0 : direction right

  cursor_blink = 1;



  if(cursor_direction_left_right == 0){    // 0 : direction left
    char_pos = 0;
    cursor_position = 0;
  }
  else{
    char_pos = 0;
    cursor_position = 0;
  }
 
  for(i=0;i<16;i++){
    display_value1[i] = ' ';
    display_value2[i] = ' ';
    display_empty_value[i] = ' ';

    cursor_pos1[i] = ' ';
    cursor_pos2[i] = ' ';
  }


  printf("Start Char LCD\n");
	
  while(1){

    if(init != 0)
      wwatch (PORTA);

    portA_value = PORTA;

    if(portA_value & 0x01){
      rising_edge_init = 1;
    }
    else if( !(portA_value & 0x01) )
    {
      if(rising_edge_init == 1){
        falling_edge = 1;
      }
      else 
        falling_edge = 0;
    }

    if(init == 0)
      lcd_display();


    if(falling_edge == 1){
      falling_edge = 0;
      rising_edge_init = 0;

      portB_value = PORTB;

      if( (portA_value & 0x04) == 0x00){  // Write mode
        if( (portA_value & 0x02) == 0x00){  // Instruction
          if( (portB_value & 0x80) == 0x80){
            printf("[INSTRUCTION]Set DDRAM address\n");
            addr_DDRAM = portB_value & 0x7f;
            if(addr_DDRAM < 0x40)
              line_number = 1;
            else
              line_number = 2;

            char_pos = cursor_position = addr_DDRAM & 0x0f;
            
            printf("  [ADDRESS DDRAM] address of DDRAM : 0x%02x\n",addr_DDRAM);
            lcd_display();
          }
          else if( (portB_value & 0xC0) == 0x40){
            printf("[INSTRUCTION]Set CGRAM address\n");
            addr_CGRAM = portB_value & 0x3f;
            printf("  [ADDRESS CGRAM] address of CGRAM : 0x%02x\n",addr_CGRAM);
          }
          else if( (portB_value & 0xE0) == 0x20){
            printf("[INSTRUCTION]Function Set\n");
            function_set(portB_value);
          }
          else if( (portB_value & 0xF0) == 0x10){
            printf("[INSTRUCTION]Cursor or Display Shift\n");
            cursor_display_shift(portB_value);
          }
          else if( (portB_value & 0xF8) == 0x08){
            printf("[INSTRUCTION]Display ON/OFF\n");
            disp_on_off(portB_value);
          }
          else if( (portB_value & 0xFC) == 0x04){
            printf("[INSTRUCTION]Entry Mode Set\n");
            addr_inc_dec(portB_value);
          }
          else if( (portB_value & 0xFE) == 0x02){
            printf("[INSTRUCTION]Return Home\n");
            
            // for(i=0;i<16;i++){
            //   cursor_pos1[i] = ' ';
            //   cursor_pos2[i] = ' ';
            // }
            
            if(cursor_direction_left_right == 1){  // 1 : direction right
              cursor_position = 0;
              char_pos = 0;
            }
            else{
              cursor_position = 15;
              char_pos = 15;
            }

            line_number = 1;
            lcd_display();            
          }
          else if( (portB_value & 0xFF) == 0x01){
            printf("[INSTRUCTION]Clear Display\n");

            for(i=0;i<16;i++){
              display_value1[i] = ' ';
              display_value2[i] = ' ';
              
              cursor_pos1[i] = ' ';
              cursor_pos2[i] = ' ';
            }

            // 1 : direction right
            cursor_direction_left_right = 1;  // 1 : direction RIGHT
            cursor_position = 0;
            char_pos = 0;
            line_number = 1;


            lcd_display();

          }
          
        }
        else if( (portA_value & 0x02) == 0x02) // data
        {
          printf("[DATA]Write data to RAM(0x%02x)\n",portB_value);

          if( PORTB >= 0x20)
            portB_value = portB_value;
          else 
            portB_value = ' ';
          
          data_func(portB_value);




        }
      }
    } 

    init = 1;
  }
}



DEFINE BUTTON "CHAR_LCD", "char_lcd()"

